# -*- coding: utf-8 -*-
"""AutoNew.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tq7TOK3F6CQ5ifiIZf8g2C27JGENlDlc
"""

# Commented out IPython magic to ensure Python compatibility.
# Create your project folder and navigate into it
!mkdir immigration-automation
# %cd immigration-automation

# Set up Python environment
!python -m venv venv
!source venv/bin/activate  # Windows: venv\Scripts\activate

# Install basic packages
!pip install streamlit fastapi easyocr opencv-python pillow pandas

# simple_ocr.py - Your first working OCR
import easyocr
import streamlit as st
from PIL import Image

# Initialize OCR (supports English and Hindi)
reader = easyocr.Reader(['en', 'hi'])

def extract_text(image):
    """Extract text from uploaded image"""
    result = reader.readtext(image)

    # Combine all text
    full_text = ""
    for (bbox, text, confidence) in result:
        full_text += text + " "

    return full_text, result

# Streamlit interface
st.title("üîç Simple Immigration Document OCR")
uploaded_file = st.file_uploader("Upload an image", type=['png', 'jpg', 'jpeg'])

if uploaded_file:
    # Display image
    image = Image.open(uploaded_file)
    st.image(image, width=400)

    # Extract text
    if st.button("Extract Text"):
        text, details = extract_text(image)
        st.success("Text extracted!")
        st.text_area("Extracted Text:", text, height=200)

# document_classifier.py
import re

def classify_document(text):
    """Simple rule-based document classification"""
    text_lower = text.lower()

    # Passport keywords
    if any(word in text_lower for word in ['passport', 'republic of india', 'travel document']):
        return {"type": "passport", "confidence": 0.9}

    # Visa keywords
    elif any(word in text_lower for word in ['visa', 'entry permit', 'temporary resident']):
        return {"type": "visa", "confidence": 0.9}

    # Certificate keywords
    elif any(word in text_lower for word in ['certificate', 'birth', 'marriage']):
        return {"type": "certificate", "confidence": 0.8}

    else:
        return {"type": "unknown", "confidence": 0.5}

def extract_important_info(text, doc_type):
    """Extract key information based on document type"""
    info = {}

    if doc_type == "passport":
        # Find passport number (example pattern)
        passport_match = re.search(r'[A-Z]{1,2}[0-9]{6,8}', text)
        if passport_match:
            info['passport_number'] = passport_match.group()

    elif doc_type == "visa":
        # Find visa number
        visa_match = re.search(r'[A-Z0-9]{8,12}', text)
        if visa_match:
            info['visa_number'] = visa_match.group()

    # Find dates (common to all documents)
    dates = re.findall(r'\d{1,2}[/-]\d{1,2}[/-]\d{4}', text)
    if dates:
        info['dates_found'] = dates

    return info

# file_organizer.py
import os
import shutil
from datetime import datetime

def create_user_folders(username):
    """Create organized folder structure for user"""
    base_path = f"processed_documents/{username}"

    # Create main user folder
    os.makedirs(base_path, exist_ok=True)

    # Create subfolders for different document types
    doc_types = ["passport", "visa", "certificate", "permit", "other"]
    for doc_type in doc_types:
        os.makedirs(f"{base_path}/{doc_type}", exist_ok=True)

    return base_path

def organize_document(username, doc_type, original_file, extracted_data):
    """Move and organize processed document"""
    # Create folder structure
    user_path = create_user_folders(username)

    # Generate new filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_extension = os.path.splitext(original_file)[1]
    new_filename = f"{doc_type}_{timestamp}{file_extension}"

    # Move file to organized location
    destination = f"{user_path}/{doc_type}/{new_filename}"
    shutil.copy2(original_file, destination)

    # Create metadata file
    metadata = {
        "original_name": os.path.basename(original_file),
        "processed_date": datetime.now().isoformat(),
        "document_type": doc_type,
        "extracted_data": extracted_data
    }

    # Save metadata as JSON
    import json
    metadata_file = f"{destination}.json"
    with open(metadata_file, 'w') as f:
        json.dump(metadata, f, indent=2)

    return destination





